 

// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
//
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using BrightstarDB.Client;
using BrightstarDB.EntityFramework;

using System.Text;
using System.Threading.Tasks;

namespace RSPO 
{
    public partial class MyEntityContext : BrightstarEntityContext {
    	
    	static MyEntityContext() 
    	{
            InitializeEntityMappingStore();
        }
        
        /// <summary>
        /// Initialize the internal cache of entity attribute information.
        /// </summary>
        /// <remarks>
        /// This method is normally invoked from the static constructor for the generated context class.
        /// It is provided as a public static method to enable the use of the cached entity attribute 
        /// information without the need to construct a context (typically in test code). 
        /// In normal application code you should never need to explicitly call this method.
        /// </remarks>
        public static void InitializeEntityMappingStore()
        {
    		var provider = new ReflectionMappingProvider();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(RSPO.IAgent));
    		EntityMappingStore.Instance.SetImplMapping<RSPO.IAgent, RSPO.Agent>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(RSPO.IObject));
    		EntityMappingStore.Instance.SetImplMapping<RSPO.IObject, RSPO.Object>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(RSPO.IOffer));
    		EntityMappingStore.Instance.SetImplMapping<RSPO.IOffer, RSPO.Offer>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(RSPO.ILocation));
    		EntityMappingStore.Instance.SetImplMapping<RSPO.ILocation, RSPO.Location>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(RSPO.ICountry));
    		EntityMappingStore.Instance.SetImplMapping<RSPO.ICountry, RSPO.Country>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(RSPO.IRegion));
    		EntityMappingStore.Instance.SetImplMapping<RSPO.IRegion, RSPO.Region>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(RSPO.ISite));
    		EntityMappingStore.Instance.SetImplMapping<RSPO.ISite, RSPO.Site>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(RSPO.IBuildingSeries));
    		EntityMappingStore.Instance.SetImplMapping<RSPO.IBuildingSeries, RSPO.BuildingSeries>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(RSPO.IObjectClass));
    		EntityMappingStore.Instance.SetImplMapping<RSPO.IObjectClass, RSPO.ObjectClass>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(RSPO.IClassName));
    		EntityMappingStore.Instance.SetImplMapping<RSPO.IClassName, RSPO.ClassName>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(RSPO.ILikes));
    		EntityMappingStore.Instance.SetImplMapping<RSPO.ILikes, RSPO.Likes>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(RSPO.IProperty));
    		EntityMappingStore.Instance.SetImplMapping<RSPO.IProperty, RSPO.Property>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(RSPO.IPropertyType));
    		EntityMappingStore.Instance.SetImplMapping<RSPO.IPropertyType, RSPO.PropertyType>();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified BrightstarDB
    	/// Data Object Store connection
    	/// </summary>
    	/// <param name="dataObjectStore">The connection to the BrightstarDB Data Object Store that will provide the entity objects</param>
    	public MyEntityContext(IDataObjectStore dataObjectStore) : base(dataObjectStore)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar connection string
    	/// </summary>
    	/// <param name="connectionString">The connection to be used to connect to an existing BrightstarDB store</param>
    	/// <param name="enableOptimisticLocking">OPTIONAL: If set to true optmistic locking will be applied to all entity updates</param>
        /// <param name="updateGraphUri">OPTIONAL: The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// not defined, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">OPTIONAL: The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If not defined, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">OPTIONAL: The URI identifier of the graph that contains version number statements for entities. 
        /// If not defined, the <paramref name="updateGraphUri"/> will be used.</param>
    	public MyEntityContext(
    	    string connectionString, 
    		bool? enableOptimisticLocking=null,
    		string updateGraphUri = null,
    		IEnumerable<string> datasetGraphUris = null,
    		string versionGraphUri = null
        ) : base(connectionString, enableOptimisticLocking, updateGraphUri, datasetGraphUris, versionGraphUri)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration.
    	/// </summary>
    	public MyEntityContext() : base()
    	{
    		InitializeContext();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration and the
    	//  specified target graphs
    	/// </summary>
        /// <param name="updateGraphUri">The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// set to null, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If set to null, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">The URI identifier of the graph that contains version number statements for entities. 
        /// If set to null, the value of <paramref name="updateGraphUri"/> will be used.</param>
    	public MyEntityContext(
    		string updateGraphUri,
    		IEnumerable<string> datasetGraphUris,
    		string versionGraphUri
    	) : base(updateGraphUri:updateGraphUri, datasetGraphUris:datasetGraphUris, versionGraphUri:versionGraphUri)
    	{
    		InitializeContext();
    	}
    	
    	private void InitializeContext() 
    	{
    		Agents = 	new BrightstarEntitySet<RSPO.IAgent>(this);
    		Objects = 	new BrightstarEntitySet<RSPO.IObject>(this);
    		Offers = 	new BrightstarEntitySet<RSPO.IOffer>(this);
    		Locations = 	new BrightstarEntitySet<RSPO.ILocation>(this);
    		Countries = 	new BrightstarEntitySet<RSPO.ICountry>(this);
    		Regions = 	new BrightstarEntitySet<RSPO.IRegion>(this);
    		Sites = 	new BrightstarEntitySet<RSPO.ISite>(this);
    		BuildingSeriess = 	new BrightstarEntitySet<RSPO.IBuildingSeries>(this);
    		ObjectClasss = 	new BrightstarEntitySet<RSPO.IObjectClass>(this);
    		ClassNames = 	new BrightstarEntitySet<RSPO.IClassName>(this);
    		Likess = 	new BrightstarEntitySet<RSPO.ILikes>(this);
    		Properties = 	new BrightstarEntitySet<RSPO.IProperty>(this);
    		PropertyTypes = 	new BrightstarEntitySet<RSPO.IPropertyType>(this);
    	}
    	
    	public IEntitySet<RSPO.IAgent> Agents
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<RSPO.IObject> Objects
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<RSPO.IOffer> Offers
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<RSPO.ILocation> Locations
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<RSPO.ICountry> Countries
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<RSPO.IRegion> Regions
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<RSPO.ISite> Sites
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<RSPO.IBuildingSeries> BuildingSeriess
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<RSPO.IObjectClass> ObjectClasss
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<RSPO.IClassName> ClassNames
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<RSPO.ILikes> Likess
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<RSPO.IProperty> Properties
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<RSPO.IPropertyType> PropertyTypes
    	{
    		get; private set;
    	}
    	
        public IEntitySet<T> EntitySet<T>() where T : class {
            var itemType = typeof(T);
            if (typeof(T).Equals(typeof(RSPO.IAgent))) {
                return (IEntitySet<T>)this.Agents;
            }
            if (typeof(T).Equals(typeof(RSPO.IObject))) {
                return (IEntitySet<T>)this.Objects;
            }
            if (typeof(T).Equals(typeof(RSPO.IOffer))) {
                return (IEntitySet<T>)this.Offers;
            }
            if (typeof(T).Equals(typeof(RSPO.ILocation))) {
                return (IEntitySet<T>)this.Locations;
            }
            if (typeof(T).Equals(typeof(RSPO.ICountry))) {
                return (IEntitySet<T>)this.Countries;
            }
            if (typeof(T).Equals(typeof(RSPO.IRegion))) {
                return (IEntitySet<T>)this.Regions;
            }
            if (typeof(T).Equals(typeof(RSPO.ISite))) {
                return (IEntitySet<T>)this.Sites;
            }
            if (typeof(T).Equals(typeof(RSPO.IBuildingSeries))) {
                return (IEntitySet<T>)this.BuildingSeriess;
            }
            if (typeof(T).Equals(typeof(RSPO.IObjectClass))) {
                return (IEntitySet<T>)this.ObjectClasss;
            }
            if (typeof(T).Equals(typeof(RSPO.IClassName))) {
                return (IEntitySet<T>)this.ClassNames;
            }
            if (typeof(T).Equals(typeof(RSPO.ILikes))) {
                return (IEntitySet<T>)this.Likess;
            }
            if (typeof(T).Equals(typeof(RSPO.IProperty))) {
                return (IEntitySet<T>)this.Properties;
            }
            if (typeof(T).Equals(typeof(RSPO.IPropertyType))) {
                return (IEntitySet<T>)this.PropertyTypes;
            }
            throw new InvalidOperationException(typeof(T).FullName + " is not a recognized entity interface type.");
        }
    
        } // end class MyEntityContext
        
}
namespace RSPO 
{
    
    public partial class Agent : BrightstarEntityObject, IAgent 
    {
    	public Agent(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Agent(BrightstarEntityContext context) : base(context, typeof(Agent)) { }
    	public Agent() : base() { }
    	#region Implementation of RSPO.IAgent
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public System.String NickName
    	{
            		get { return GetRelatedProperty<System.String>("NickName"); }
            		set { SetRelatedProperty("NickName", value); }
    	}
    
    	public System.String PasswordHash
    	{
            		get { return GetRelatedProperty<System.String>("PasswordHash"); }
            		set { SetRelatedProperty("PasswordHash", value); }
    	}
    
    	public System.String Phone
    	{
            		get { return GetRelatedProperty<System.String>("Phone"); }
            		set { SetRelatedProperty("Phone", value); }
    	}
    
    	public System.String Email
    	{
            		get { return GetRelatedProperty<System.String>("Email"); }
            		set { SetRelatedProperty("Email", value); }
    	}
    
    	public RSPO.RoleEnum Role
    	{
            		get { return GetRelatedProperty<RSPO.RoleEnum>("Role"); }
            		set { SetRelatedProperty("Role", value); }
    	}
    
    	public System.String GUID
    	{
            		get { return GetRelatedProperty<System.String>("GUID"); }
            		set { SetRelatedProperty("GUID", value); }
    	}
    	public System.Collections.Generic.ICollection<RSPO.IProperty> Properties
    	{
    		get { return GetRelatedObjects<RSPO.IProperty>("Properties"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Properties", value); }
    								}
    	#endregion
    }
}
namespace RSPO 
{
    
    public partial class Object : BrightstarEntityObject, IObject 
    {
    	public Object(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Object(BrightstarEntityContext context) : base(context, typeof(Object)) { }
    	public Object() : base() { }
    	#region Implementation of RSPO.IObject
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public RSPO.ILocation Location
    	{
            get { return GetRelatedObject<RSPO.ILocation>("Location"); }
            set { SetRelatedObject<RSPO.ILocation>("Location", value); }
    	}
    
    	public System.String Address
    	{
            		get { return GetRelatedProperty<System.String>("Address"); }
            		set { SetRelatedProperty("Address", value); }
    	}
    
    	public System.Single Price
    	{
            		get { return GetRelatedProperty<System.Single>("Price"); }
            		set { SetRelatedProperty("Price", value); }
    	}
    
    	public RSPO.CurrencyEnum CurrencyType
    	{
            		get { return GetRelatedProperty<RSPO.CurrencyEnum>("CurrencyType"); }
            		set { SetRelatedProperty("CurrencyType", value); }
    	}
    
    	public System.Single Area
    	{
            		get { return GetRelatedProperty<System.Single>("Area"); }
            		set { SetRelatedProperty("Area", value); }
    	}
    
    	public RSPO.AreaUnits AreaUnit
    	{
            		get { return GetRelatedProperty<RSPO.AreaUnits>("AreaUnit"); }
            		set { SetRelatedProperty("AreaUnit", value); }
    	}
    
    	public System.String ImageURL
    	{
            		get { return GetRelatedProperty<System.String>("ImageURL"); }
            		set { SetRelatedProperty("ImageURL", value); }
    	}
    
    	public System.String URL
    	{
            		get { return GetRelatedProperty<System.String>("URL"); }
            		set { SetRelatedProperty("URL", value); }
    	}
    
    	public System.Int32 Rooms
    	{
            		get { return GetRelatedProperty<System.Int32>("Rooms"); }
            		set { SetRelatedProperty("Rooms", value); }
    	}
    
    	public System.Int32 RoomsOffered
    	{
            		get { return GetRelatedProperty<System.Int32>("RoomsOffered"); }
            		set { SetRelatedProperty("RoomsOffered", value); }
    	}
    
    	public System.Int32 Floor
    	{
            		get { return GetRelatedProperty<System.Int32>("Floor"); }
            		set { SetRelatedProperty("Floor", value); }
    	}
    
    	public System.Int32 FloorTotal
    	{
            		get { return GetRelatedProperty<System.Int32>("FloorTotal"); }
            		set { SetRelatedProperty("FloorTotal", value); }
    	}
    
    	public System.Int32 TotalFloors
    	{
            		get { return GetRelatedProperty<System.Int32>("TotalFloors"); }
            		set { SetRelatedProperty("TotalFloors", value); }
    	}
    
    	public RSPO.BuildingEnum BuildingType
    	{
            		get { return GetRelatedProperty<RSPO.BuildingEnum>("BuildingType"); }
            		set { SetRelatedProperty("BuildingType", value); }
    	}
    
    	public RSPO.IBuildingSeries BuildingSeries
    	{
            get { return GetRelatedObject<RSPO.IBuildingSeries>("BuildingSeries"); }
            set { SetRelatedObject<RSPO.IBuildingSeries>("BuildingSeries", value); }
    	}
    
    	public RSPO.PropertyEnum PropertyType
    	{
            		get { return GetRelatedProperty<RSPO.PropertyEnum>("PropertyType"); }
            		set { SetRelatedProperty("PropertyType", value); }
    	}
    
    	public RSPO.CategoryEnum Category
    	{
            		get { return GetRelatedProperty<RSPO.CategoryEnum>("Category"); }
            		set { SetRelatedProperty("Category", value); }
    	}
    
    	public System.String Description
    	{
            		get { return GetRelatedProperty<System.String>("Description"); }
            		set { SetRelatedProperty("Description", value); }
    	}
    	public System.Collections.Generic.ICollection<RSPO.IAgent> Agents
    	{
    		get { return GetRelatedObjects<RSPO.IAgent>("Agents"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Agents", value); }
    								}
    	public System.Collections.Generic.ICollection<RSPO.IProperty> Properties
    	{
    		get { return GetRelatedObjects<RSPO.IProperty>("Properties"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Properties", value); }
    								}
    
    	public System.String GUID
    	{
            		get { return GetRelatedProperty<System.String>("GUID"); }
            		set { SetRelatedProperty("GUID", value); }
    	}
    	#endregion
    }
}
namespace RSPO 
{
    
    public partial class Offer : BrightstarEntityObject, IOffer 
    {
    	public Offer(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Offer(BrightstarEntityContext context) : base(context, typeof(Offer)) { }
    	public Offer() : base() { }
    	#region Implementation of RSPO.IOffer
    
    	public RSPO.IObject Object
    	{
            get { return GetRelatedObject<RSPO.IObject>("Object"); }
            set { SetRelatedObject<RSPO.IObject>("Object", value); }
    	}
    
    	public RSPO.OfferEnum OfferType
    	{
            		get { return GetRelatedProperty<RSPO.OfferEnum>("OfferType"); }
            		set { SetRelatedProperty("OfferType", value); }
    	}
    
    	public System.String SiteId
    	{
            		get { return GetRelatedProperty<System.String>("SiteId"); }
            		set { SetRelatedProperty("SiteId", value); }
    	}
    
    	public RSPO.ISite Site
    	{
            get { return GetRelatedObject<RSPO.ISite>("Site"); }
            set { SetRelatedObject<RSPO.ISite>("Site", value); }
    	}
    
    	public System.DateTime Created
    	{
            		get { return GetRelatedProperty<System.DateTime>("Created"); }
            		set { SetRelatedProperty("Created", value); }
    	}
    
    	public System.DateTime Updated
    	{
            		get { return GetRelatedProperty<System.DateTime>("Updated"); }
            		set { SetRelatedProperty("Updated", value); }
    	}
    
    	public RSPO.IAgent Agent
    	{
            get { return GetRelatedObject<RSPO.IAgent>("Agent"); }
            set { SetRelatedObject<RSPO.IAgent>("Agent", value); }
    	}
    
    	public System.String GUID
    	{
            		get { return GetRelatedProperty<System.String>("GUID"); }
            		set { SetRelatedProperty("GUID", value); }
    	}
    	#endregion
    }
}
namespace RSPO 
{
    
    public partial class Location : BrightstarEntityObject, ILocation 
    {
    	public Location(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Location(BrightstarEntityContext context) : base(context, typeof(Location)) { }
    	public Location() : base() { }
    	#region Implementation of RSPO.ILocation
    
    	public RSPO.IRegion Region
    	{
            get { return GetRelatedObject<RSPO.IRegion>("Region"); }
            set { SetRelatedObject<RSPO.IRegion>("Region", value); }
    	}
    
    	public System.String LocalityName
    	{
            		get { return GetRelatedProperty<System.String>("LocalityName"); }
            		set { SetRelatedProperty("LocalityName", value); }
    	}
    
    	public System.String SubLocalityName
    	{
            		get { return GetRelatedProperty<System.String>("SubLocalityName"); }
            		set { SetRelatedProperty("SubLocalityName", value); }
    	}
    	#endregion
    }
}
namespace RSPO 
{
    
    public partial class Country : BrightstarEntityObject, ICountry 
    {
    	public Country(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Country(BrightstarEntityContext context) : base(context, typeof(Country)) { }
    	public Country() : base() { }
    	#region Implementation of RSPO.ICountry
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    	#endregion
    }
}
namespace RSPO 
{
    
    public partial class Region : BrightstarEntityObject, IRegion 
    {
    	public Region(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Region(BrightstarEntityContext context) : base(context, typeof(Region)) { }
    	public Region() : base() { }
    	#region Implementation of RSPO.IRegion
    
    	public RSPO.ICountry Country
    	{
            get { return GetRelatedObject<RSPO.ICountry>("Country"); }
            set { SetRelatedObject<RSPO.ICountry>("Country", value); }
    	}
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    	#endregion
    }
}
namespace RSPO 
{
    
    public partial class Site : BrightstarEntityObject, ISite 
    {
    	public Site(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Site(BrightstarEntityContext context) : base(context, typeof(Site)) { }
    	public Site() : base() { }
    	#region Implementation of RSPO.ISite
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public System.String URL
    	{
            		get { return GetRelatedProperty<System.String>("URL"); }
            		set { SetRelatedProperty("URL", value); }
    	}
    	#endregion
    }
}
namespace RSPO 
{
    
    public partial class BuildingSeries : BrightstarEntityObject, IBuildingSeries 
    {
    	public BuildingSeries(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public BuildingSeries(BrightstarEntityContext context) : base(context, typeof(BuildingSeries)) { }
    	public BuildingSeries() : base() { }
    	#region Implementation of RSPO.IBuildingSeries
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    	#endregion
    }
}
namespace RSPO 
{
    
    public partial class ObjectClass : BrightstarEntityObject, IObjectClass 
    {
    	public ObjectClass(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public ObjectClass(BrightstarEntityContext context) : base(context, typeof(ObjectClass)) { }
    	public ObjectClass() : base() { }
    	#region Implementation of RSPO.IObjectClass
    
    	public RSPO.IObject Object
    	{
            get { return GetRelatedObject<RSPO.IObject>("Object"); }
            set { SetRelatedObject<RSPO.IObject>("Object", value); }
    	}
    
    	public System.Int32 Cluster
    	{
            		get { return GetRelatedProperty<System.Int32>("Cluster"); }
            		set { SetRelatedProperty("Cluster", value); }
    	}
    	#endregion
    }
}
namespace RSPO 
{
    
    public partial class ClassName : BrightstarEntityObject, IClassName 
    {
    	public ClassName(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public ClassName(BrightstarEntityContext context) : base(context, typeof(ClassName)) { }
    	public ClassName() : base() { }
    	#region Implementation of RSPO.IClassName
    
    	public System.Int32 Cluster
    	{
            		get { return GetRelatedProperty<System.Int32>("Cluster"); }
            		set { SetRelatedProperty("Cluster", value); }
    	}
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    	#endregion
    }
}
namespace RSPO 
{
    
    public partial class Likes : BrightstarEntityObject, ILikes 
    {
    	public Likes(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Likes(BrightstarEntityContext context) : base(context, typeof(Likes)) { }
    	public Likes() : base() { }
    	#region Implementation of RSPO.ILikes
    
    	public RSPO.IAgent Agent
    	{
            get { return GetRelatedObject<RSPO.IAgent>("Agent"); }
            set { SetRelatedObject<RSPO.IAgent>("Agent", value); }
    	}
    
    	public RSPO.IObject Object
    	{
            get { return GetRelatedObject<RSPO.IObject>("Object"); }
            set { SetRelatedObject<RSPO.IObject>("Object", value); }
    	}
    
    	public System.Double Value
    	{
            		get { return GetRelatedProperty<System.Double>("Value"); }
            		set { SetRelatedProperty("Value", value); }
    	}
    
    	public RSPO.OriginatingEnum Quality
    	{
            		get { return GetRelatedProperty<RSPO.OriginatingEnum>("Quality"); }
            		set { SetRelatedProperty("Quality", value); }
    	}
    	#endregion
    }
}
namespace RSPO 
{
    
    public partial class Property : BrightstarEntityObject, IProperty 
    {
    	public Property(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Property(BrightstarEntityContext context) : base(context, typeof(Property)) { }
    	public Property() : base() { }
    	#region Implementation of RSPO.IProperty
    
    	public RSPO.IPropertyType Type
    	{
            get { return GetRelatedObject<RSPO.IPropertyType>("Type"); }
            set { SetRelatedObject<RSPO.IPropertyType>("Type", value); }
    	}
    
    	public System.String Value
    	{
            		get { return GetRelatedProperty<System.String>("Value"); }
            		set { SetRelatedProperty("Value", value); }
    	}
    	#endregion
    }
}
namespace RSPO 
{
    
    public partial class PropertyType : BrightstarEntityObject, IPropertyType 
    {
    	public PropertyType(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public PropertyType(BrightstarEntityContext context) : base(context, typeof(PropertyType)) { }
    	public PropertyType() : base() { }
    	#region Implementation of RSPO.IPropertyType
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public System.Single Significance
    	{
            		get { return GetRelatedProperty<System.Single>("Significance"); }
            		set { SetRelatedProperty("Significance", value); }
    	}
    	public System.Collections.Generic.ICollection<RSPO.IProperty> Properties
    	{
    		get { return GetRelatedObjects<RSPO.IProperty>("Properties"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Properties", value); }
    								}
    
    	public System.String GUID
    	{
            		get { return GetRelatedProperty<System.String>("GUID"); }
            		set { SetRelatedProperty("GUID", value); }
    	}
    	#endregion
    }
}
